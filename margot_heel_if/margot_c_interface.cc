#include <string>
extern "C" {
	#include "margot.h"
}
#include "margot.hpp"





/**
 * WARNING:
 * This file is autogenerated from the "margotcli" utility function.
 * Any changes to this file might be overwritten, thus in order to 
 * perform a permanent change, please update the configuration file 
 * and re-generate this file. 
 */ 


extern "C" {


	// The interface for the managed block "sleeping"


	int margot_sleeping_update( int* param1, int* param2, int* param3 )
	{
		return static_cast<int>(margot::sleeping::update( *param1, *param2, *param3 ));
	}

	void margot_sleeping_start_monitor( void )
	{
		margot::sleeping::start_monitor(  );
	}

	void margot_sleeping_log( void )
	{
		margot::sleeping::log();
	}

	void margot_sleeping_stop_monitor( int num_threads, long double error )
	{
		margot::sleeping::stop_monitor( num_threads, error );
	}

	void margot_sleeping_configuration_applied( void )
	{
		margot::sleeping::manager.configuration_applied();
	}

	void margot_sleeping_configuration_rejected( void )
	{
		margot::sleeping::manager.configuration_rejected();
	}

	void margot_sleeping_change_state( const char* new_state )
	{
		margot::sleeping::manager.change_active_state(std::string(new_state));
	}


	void margot_sleeping_goal_my_throughput_goal_set_value(const double new_value)
	{
		margot::sleeping::goal::my_throughput_goal.set<margot::throughput_monitor_t::value_type>(static_cast<margot::throughput_monitor_t::value_type>(new_value));
	}
	void margot_sleeping_goal_my_error_goal_set_value(const double new_value)
	{
		margot::sleeping::goal::my_error_goal.set<margot::metric_t>(static_cast<margot::metric_t>(new_value));
	}





	// The global initialization method


	void margot_init( void )
	{
		margot::init();
	}
}


