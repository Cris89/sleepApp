#ifndef MARGOT_CC_HEADER_H
#define MARGOT_CC_HEADER_H
#include <margot/throughput_monitor.hpp>
#include <margot/monitor.hpp>
#include <margot/asrtm.hpp>
#include <cstddef>
#include "margot_op_struct.hpp"


// decomment/comment these macros to enable/disable features
#define MARGOT_LOG_STDOUT
#define MARGOT_LOG_FILE
#ifndef BLOCK_SLEEPING_AUTOTUNED
#define BLOCK_SLEEPING_AUTOTUNED
#endif // BLOCK_SLEEPING_AUTOTUNED





/**
 * WARNING:
 * This file is autogenerated from the "margotcli" utility function.
 * Any changes to this file might be overwritten, thus in order to 
 * perform a permanent change, please update the configuration file 
 * and re-generate this file. 
 */ 


namespace margot {


	namespace sleeping {

		namespace monitor {
			extern margot::throughput_monitor_t my_throughput_monitor;
			extern margot::monitor_t<long double> my_error_monitor;
		} // namespace monitor

		namespace goal {
			extern goal_t my_throughput_goal;
			extern goal_t my_error_goal;
		} // namespace goal


		extern asrtm_t manager;




		extern operating_points_t op_list;



		extern double avg_throughput;

		extern double avg_error;


		bool update( int& param1, int& param2, int& param3 );


		void start_monitor( void );


		void stop_monitor( int num_threads, long double error );


		void log( void );


#ifndef MARGOT_MANAGED_BLOCK_SLEEPING
#define MARGOT_MANAGED_BLOCK_SLEEPING \
if (margot::sleeping::update( param1, param2, param3 )) {\
margot::sleeping::manager.configuration_applied();}\
margot::sleeping::start_monitor(  );\
for(bool flag = true; flag == true; margot::sleeping::stop_monitor( num_threads, error ), margot::sleeping::log(), flag = false )
#endif // MARGOT_MANAGED_BLOCK_


	} // namespace sleeping


	void init( void );


} // namespace margot

#endif // MARGOT_CC_HEADER_H

