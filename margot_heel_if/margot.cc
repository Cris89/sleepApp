#include "margot.hpp"
#include "margot_op_struct.hpp"
#ifdef MARGOT_LOG_STDOUT
#include <iostream>
#endif // MARGOT_LOG_STDOUT
#ifdef MARGOT_LOG_FILE
#include "margot_logger.hpp"
#endif // MARGOT_LOG_FILE



/**
 * WARNING:
 * This file is autogenerated from the "margotcli" utility function.
 * Any changes to this file might be overwritten, thus in order to 
 * perform a permanent change, please update the configuration file 
 * and re-generate this file. 
 */ 


namespace margot {


	namespace sleeping {

		namespace monitor {
			margot::throughput_monitor_t my_throughput_monitor;
			margot::monitor_t<long double> my_error_monitor;
		} // namespace monitor

		namespace goal {
			goal_t my_throughput_goal;
			goal_t my_error_goal;
		} // namespace goal


		asrtm_t manager;

		#ifdef MARGOT_LOG_FILE
		Logger file_logger;
		#endif // MARGOT_LOG_FILE



		double avg_throughput;

		double avg_error;


		bool update( int& param1, int& param2, int& param3 )
		{
			#ifdef BLOCK_SLEEPING_AUTOTUNED
			manager.update();
			manager.find_best_operating_point();
			bool conf_changed = false;
			configuration_t actual_configuration = manager.get_best_configuration(&conf_changed);
			if (conf_changed)
			{
				param1 = actual_configuration[static_cast<int>(Knob::PARAM1)];
				param2 = actual_configuration[static_cast<int>(Knob::PARAM2)];
				param3 = actual_configuration[static_cast<int>(Knob::PARAM3)];
			}
			return conf_changed;
			#else // BLOCK_SLEEPING_AUTOTUNED
			return false;
			#endif // BLOCK_SLEEPING_AUTOTUNED
		}


		void start_monitor( void )
		{
			monitor::my_throughput_monitor.start();
		}


		void stop_monitor( int num_threads, long double error )
		{
			monitor::my_throughput_monitor.stop(num_threads);
			monitor::my_error_monitor.push(error);

		}

		void log( void )
		{
			avg_throughput = monitor::my_throughput_monitor.average();
			avg_error = monitor::my_error_monitor.average();


			#ifdef MARGOT_LOG_FILE
			file_logger.write(  
				margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM1)),
				margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM2)),
				margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM3)),
				margot::sleeping::manager.get_metric_value(static_cast<margot::field_name_t>(margot::sleeping::Metric::THROUGHPUT)),
				margot::sleeping::manager.get_metric_value(static_cast<margot::field_name_t>(margot::sleeping::Metric::ERROR)),
				margot::sleeping::goal::my_throughput_goal.get(),
				margot::sleeping::goal::my_error_goal.get(),
				margot::sleeping::avg_throughput,
				margot::sleeping::avg_error
			);
			#endif // MARGOT_LOG_FILE

			#ifdef MARGOT_LOG_STDOUT
			std::cout <<"Monitored values: "
				<< "[ avg_throughput = " << margot::sleeping::avg_throughput << "]"
				<< "[ avg_error = " << margot::sleeping::avg_error << "]"
				<< std::endl;
			std::cout << "Goal values: "
				<< "[ my_throughput_goal = " << margot::sleeping::goal::my_throughput_goal.get() << "]"
				<< "[ my_error_goal = " << margot::sleeping::goal::my_error_goal.get() << "]"
				<< std::endl;
			std::cout << "Knob values: "
				<< "[ PARAM1 = " << margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM1)) << "]"
				<< "[ PARAM2 = " << margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM2)) << "]"
				<< "[ PARAM3 = " << margot::sleeping::manager.get_parameter_value(static_cast<margot::field_name_t>(margot::sleeping::Knob::PARAM3)) << "]"
				<< std::endl;
			std::cout << "Known metrics: "
				<< "[ THROUGHPUT = " << margot::sleeping::manager.get_metric_value(static_cast<margot::field_name_t>(margot::sleeping::Metric::THROUGHPUT)) << "]"
				<< "[ ERROR = " << margot::sleeping::manager.get_metric_value(static_cast<margot::field_name_t>(margot::sleeping::Metric::ERROR)) << "]"
				<< std::endl;
			#endif // MARGOT_LOG_STDOUT
		}

	} // namespace sleeping


	void init( void )
	{


		// --------- Initializing the block "SLEEPING"
		sleeping::monitor::my_throughput_monitor = margot::throughput_monitor_t();
		sleeping::monitor::my_error_monitor = margot::monitor_t<long double>();
		sleeping::goal::my_throughput_goal = margot::goal_t(sleeping::monitor::my_throughput_monitor, margot::DataFunction::Average, margot::ComparisonFunction::Greater, static_cast<margot::throughput_monitor_t::value_type>(7));
		sleeping::goal::my_error_goal = sleeping::manager.create_static_goal_metric(static_cast<margot::field_name_t>(sleeping::Metric::ERROR), margot::ComparisonFunction::Less, static_cast<margot::metric_t>(130));
		//sleeping::manager.add_operating_points(sleeping::op_list);

		// Defining the state "normal"
		sleeping::manager.add_state("normal");
		sleeping::manager.change_active_state("normal");
		sleeping::manager.define_linear_rank(margot::RankObjective::Minimize, margot::rank_metric_t{static_cast<field_name_t>(margot::sleeping::Metric::ERROR), 1.0f} );
		sleeping::manager.add_metric_constraint(margot::sleeping::goal::my_throughput_goal, static_cast<int>(margot::sleeping::Metric::THROUGHPUT), 50);
		sleeping::manager.add_metric_constraint(margot::sleeping::goal::my_error_goal, static_cast<int>(margot::sleeping::Metric::ERROR), 25);

		// Switch to the starting active state
		sleeping::manager.change_active_state("normal");


		#ifdef MARGOT_LOG_FILE
		sleeping::file_logger.open("sleeping.log", margot::Format::PLAIN,
			"Knob_PARAM1",
			"Knob_PARAM2",
			"Knob_PARAM3",
			"Known_Metric_THROUGHPUT",
			"Known_Metric_ERROR",
			"goal_my_throughput_goal",
			"goal_my_error_goal",
			"my_throughput_monitor_average",
			"my_error_monitor_average");
		#endif // MARGOT_LOG_FILE
	}


} // namespace margot

